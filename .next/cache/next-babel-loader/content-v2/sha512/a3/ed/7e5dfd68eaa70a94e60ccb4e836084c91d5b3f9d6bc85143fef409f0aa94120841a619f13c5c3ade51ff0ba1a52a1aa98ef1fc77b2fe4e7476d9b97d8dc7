{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/client';\nimport Link from 'next/link';\nimport Modal from 'react-modal';\nimport { ModalStyles } from 'styles/components/Modal';\nimport DisplayError from 'components/multiple/general/ErrorMessage';\nimport { SINGLE_REQUEST_QUERY } from 'graphQL/queries';\nimport { UploadPreview } from 'components/single/Images';\nimport { RedButton, SingleButton } from 'components/single/Buttons';\nimport { MainGrid, SideBar, Photo, PhotoName, VisitProfile, Content, Title, Subtitle, Message, Donate } from 'styles/pages/IndividualTransaction';\n\nconst requestPage = ({\n  query\n}) => {\n  var _Request$person, _Request$person$profi, _Request$person2, _Request$person3;\n\n  // get the request\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(SINGLE_REQUEST_QUERY, {\n    variables: {\n      id: query.id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsx(\"p\", {\n    children: \"Loading...\"\n  });\n  if (error) return /*#__PURE__*/_jsx(DisplayError, {\n    error: error\n  });\n  const {\n    Request\n  } = data; // get the destructured data\n  // the header\n\n  let header;\n\n  if (Request.category === 'Travel') {\n    header = /*#__PURE__*/_jsxs(\"h1\", {\n      children: [\"Travel from \", Request.travelOrigin, \" to \", Request.travelDestination]\n    });\n  } else if (Request.category === 'Living') {\n    header = /*#__PURE__*/_jsxs(\"h1\", {\n      children: [\"Living Expenses in \", Request.hostLocation]\n    });\n  } else if (Request.category === 'Other') {\n    header = /*#__PURE__*/_jsx(\"h1\", {\n      children: \"Other request\"\n    });\n  }\n\n  const router = useRouter();\n  const lastName = Request.person.lastName.charAt(0); // useEffect(() => {\n  //   router.prefetch('/');\n  // }, []);\n\n  return /*#__PURE__*/_jsx(Modal, {\n    isOpen: true // The modal should always be shown on page load, it is the 'page'\n    ,\n    onRequestClose: () => router.back(),\n    contentLabel: \"request-modal\",\n    style: ModalStyles,\n    children: /*#__PURE__*/_jsxs(MainGrid, {\n      children: [/*#__PURE__*/_jsxs(SideBar, {\n        children: [/*#__PURE__*/_jsxs(Photo, {\n          children: [/*#__PURE__*/_jsx(UploadPreview, {\n            image: (_Request$person = Request.person) === null || _Request$person === void 0 ? void 0 : (_Request$person$profi = _Request$person.profilePhoto) === null || _Request$person$profi === void 0 ? void 0 : _Request$person$profi.image.publicUrlTransformed\n          }), (_Request$person2 = Request.person) === null || _Request$person2 === void 0 ? void 0 : _Request$person2.firstName, \" \", lastName, \".\", /*#__PURE__*/_jsx(VisitProfile, {\n            children: /*#__PURE__*/_jsx(Link, {\n              href: `/accounts/${(_Request$person3 = Request.person) === null || _Request$person3 === void 0 ? void 0 : _Request$person3.id}`,\n              children: /*#__PURE__*/_jsx(SingleButton, {\n                children: \"View Profile\"\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(PhotoName, {}), /*#__PURE__*/_jsx(VisitProfile, {})]\n      }), /*#__PURE__*/_jsxs(Content, {\n        children: [/*#__PURE__*/_jsx(Title, {\n          children: header\n        }), /*#__PURE__*/_jsxs(Subtitle, {\n          children: [/*#__PURE__*/_jsxs(\"p\", {\n            children: [Request.numberPeople, \" people\"]\n          }), Request.amount && /*#__PURE__*/_jsxs(\"p\", {\n            children: [\"\\u20B4\", Request.amount]\n          })]\n        }), /*#__PURE__*/_jsx(Message, {\n          children: Request.message && /*#__PURE__*/_jsx(\"p\", {\n            children: Request.message\n          })\n        }), /*#__PURE__*/_jsx(Donate, {\n          children: /*#__PURE__*/_jsx(RedButton, {\n            children: \"Donate\"\n          })\n        })]\n      })]\n    })\n  });\n};\n\nexport default requestPage; // // this tells next to pre-render these pages at build\n// export function getStaticProps({ params: { query } }) {\n//   console.log('####');\n//   console.log(query);\n//   return { props: { query } };\n// }\n// // this allows next to figure out how many paths to pre-render\n// const data = ['1', '2', '3', '4'];\n// export function getStaticPaths() {\n//   return {\n//     paths: data.map((query) => ({\n//       params: {\n//         id: query.toString(),\n//       },\n//     })),\n//     fallback: false,\n//   };\n// }","map":null,"metadata":{},"sourceType":"module"}